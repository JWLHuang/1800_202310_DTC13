function doAll() {
    firebase.auth().onAuthStateChanged(user => {
        if (user) {
            insertName();
            getBookmarks(user)
        } else {
            console.log("No user is signed in");
        }
    });
}
doAll();
function insertName() {
    firebase.auth().onAuthStateChanged(user => {
        // Check if a user is signed in:
        if (user) { // Will verify who is logged in
            // Do something for the currently logged-in user here: 
            console.log(user.uid); //print the uid in the browser console
            // console.log(user.displayName);  //print the user name in the browser console
            currentUser = db.collection("users").doc(user.uid); // will to to the firestore and go to the document of the user
            currentUser.get().then(userDoc => {
                //get the user name
                var userName = userDoc.data().name;
                console.log(userName);
                //$("#name-goes-here").text(userName); //jquery
                // document.getElementById("name-goes-here").innerText = userName;
                //method #1:  insert with html only
                //document.getElementById("name-goes-here").innerText = user_Name;    //using javascript
                //method #2:  insert using jquery
                $(".name-goes-here").text(userName); //using jquery
            })
        }
        // else {
        //     // No user is signed in.
        // }
    });
}
// insertName(); //run the function

function getBookmarks(user) {

    db.collection("users").doc(user.uid).get()
        .then(userDoc => {

            // Get the Array of bookmarks
            var bookmarks = userDoc.data().bookmarks;
            console.log(bookmarks);

            // Get pointer the new card template
            let newcardTemplate = document.getElementById("savedCardTemplate");

            // Iterate through the ARRAY of bookmarked hikes (document ID's)
            bookmarks.forEach(ID => {
                console.log(ID);
                db.collection("products")
                    .doc(ID)
                    .get()
                    .then(doc => {
                        var productName = doc.data().name; // get value of the "name" key
                        var productCode = doc.data().code; //get unique ID to each hike to be used for fetching right image
                        var productPrice = doc.data().price; //gets the price field
                        var productIngredient = doc.data().ingredients; //gets the price field
                        var docID = doc.id;  //this is the autogenerated ID of the document


                        
                        //clone the new card
                        let newcard = newcardTemplate.content.cloneNode(true);
                        
                        //update title and some pertinant information
                        newcard.querySelector('.card-name').innerHTML = productName;
                        newcard.querySelector('.card-price').innerHTML = productPrice;
                        newcard.querySelector('.card-image').src = `./images/${productCode}.jpg`; //Example: NV01.jpg
                        newcard.querySelector('.card-ingredient').innerHTML = productIngredient;
                        document.querySelector('i').id = "save-" + docID
                        document.querySelector('i').onclick = () => saveBookmark(docID);
                        
                        //Finally, attach this new card to the gallery
                        savedProductsCardGroup.appendChild(newcard);
                })
            })
            
        })
}

function saveBookmark(storeID) {
    console.log("SAVE bookmark function reached")
    currentUser.get().then(userDoc => {
        //get the user name
        var bookmarks = userDoc.data().bookmarks;
        if (bookmarks.includes(storeID)) {
            removeBookmark(storeID);
            document.getElementById('save-' + storeID).innerText = 'bookmark_border';
        } else {
            currentUser.set({
                bookmarks: firebase.firestore.FieldValue.arrayUnion(storeID)
            }, {
                merge: true
            })
                .then(function () {
                    console.log("bookmark has been saved for: " + currentUser);
                    var iconID = 'save-' + storeID;
                    //console.log(iconID);
                    //this is to change the icon of the hike that was saved to "filled"
                    document.getElementById(iconID).innerText = 'bookmark';
                });
        }
    })
}

function removeBookmark(storeID) {
    console.log("REMOVE bookmark function reached")
    currentUser.set({
        bookmarks: firebase.firestore.FieldValue.arrayRemove(storeID)
    }, {
        merge: true
    })
        .then(function () {
            console.log("bookmark has been removed for: " + currentUser);
            var iconID = storeID;
            //console.log(iconID);
            //this is to change the icon of the hike that was saved to "filled"
            document.getElementById(iconID).innerText = 'bookmark_boarde';
        });
}
